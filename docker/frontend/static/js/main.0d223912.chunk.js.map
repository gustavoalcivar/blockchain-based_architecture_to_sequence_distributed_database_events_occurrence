{"version":3,"sources":["components/Block.js","services/BlockService.js","components/Blockchain.js","App.js","reportWebVitals.js","index.js"],"names":["Block","block_num","index","block_hash","previous_block_hash","signer_public_key","nonce","payload","table","transaction","data","host","blockchain_host","application_time","blockchain_time","unixDatetime","useState","detailsIsOpen","setDetailsIsOpen","TableRow","TableCell","align","onClick","component","scope","isOpen","onRequestClose","style","overlay","backgroundColor","content","color","Box","fontWeight","m","Modal","setAppElement","a","fetch","window","location","href","split","replace","then","res","json","response","trxs","blocks","forEach","block","batches","batch","transactions","jsonData","Object","assign","JSON","stringify","trx","id","datetime","push","Blockchain","setBlocks","useEffect","getBlocks","TableContainer","Paper","Table","size","aria-label","TableHead","className","TableBody","map","length","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d223912.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { TableCell, TableRow, Box } from '@material-ui/core';\r\nimport Modal from 'react-modal'\r\nimport '../App.css';\r\n\r\nModal.setAppElement('#root');\r\n\r\nexport default function Block({ block_num, index, block_hash, previous_block_hash, signer_public_key, nonce, payload, table, transaction, data, host, blockchain_host, application_time, blockchain_time, unixDatetime }) {\r\n    const [detailsIsOpen, setDetailsIsOpen] = useState(false);\r\n    return(\r\n        <TableRow>\r\n            <TableCell align=\"center\"><button onClick={() => setDetailsIsOpen(true)}>View transaction</button></TableCell>\r\n            <TableCell align=\"center\" component=\"th\" scope=\"row\">{block_num}</TableCell>\r\n            <TableCell align=\"center\">{index}</TableCell>\r\n            <TableCell align=\"center\">{table}</TableCell>\r\n            <TableCell align=\"center\">{data}</TableCell>\r\n            <TableCell align=\"center\">{host}</TableCell>\r\n            <TableCell align=\"center\">{blockchain_host}</TableCell>\r\n            <TableCell align=\"center\">{application_time}</TableCell>\r\n            <TableCell align=\"center\">{blockchain_time}</TableCell>\r\n            <Modal\r\n            isOpen={detailsIsOpen}\r\n            onRequestClose={() => setDetailsIsOpen(false)}\r\n            style={\r\n                {\r\n                    overlay: {\r\n                        backgroundColor: 'grey'\r\n                    },\r\n                    content: {\r\n                        color: 'darkblue'\r\n                    }\r\n                }\r\n            }>\r\n                <div>\r\n                    <button onClick={() => setDetailsIsOpen(false)}>Close</button>\r\n                </div>\r\n                <h3>Transaction details</h3>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Block num</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{block_num}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Block hash</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{block_hash}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Previous block hash</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{previous_block_hash}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Signer public key</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{signer_public_key}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Nonce</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{nonce}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Server</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{host}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Blockchain host</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{blockchain_host}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Table</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{table}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Transaction</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{transaction}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Application time</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{application_time}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Blockchain time</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{blockchain_time}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Unix time</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{unixDatetime}</Box>\r\n                <Box fontWeight=\"fontWeightBold\" m={1}>Payload</Box>\r\n                <Box fontWeight=\"fontWeightRegular\" m={1}>{payload}</Box>\r\n            </Modal>\r\n        </TableRow>\r\n    );\r\n}","export default async function getBlocks() {\r\n    return fetch(`${window.location.href.split(\":\")[0]}:${window.location.href.split(\":\")[1]}:4000/blocks`.replace(\"/:\", \":\"))\r\n    .then(res => res.json())\r\n    .then(response => {\r\n        const trxs = [];\r\n        const { blocks } = response\r\n        blocks.forEach(block => {\r\n            if(block.block_num !== \"0\") {\r\n                block.batches.forEach(batch => {\r\n                    batch.transactions.forEach(transaction => {\r\n                        let jsonData = Object.assign({}, transaction.payload);\r\n                        delete jsonData[\"application_time\"];\r\n                        delete jsonData[\"application_user\"];\r\n                        delete jsonData[\"database\"];\r\n                        delete jsonData[\"table\"];\r\n                        delete jsonData[\"transaction\"];\r\n                        delete jsonData[\"user\"];\r\n                        delete jsonData[\"host\"];\r\n                        delete jsonData[\"datetime\"];\r\n                        delete jsonData[\"unixDatetime\"];\r\n                        delete jsonData[\"blockchain_host\"];\r\n                        let data = JSON.stringify(jsonData);\r\n                        let trx = {\r\n                            id: transaction.id,\r\n                            block_num: block.block_num,\r\n                            block_hash: block.block_hash,\r\n                            previous_block_hash: block.previous_block_hash,\r\n                            signer_public_key: transaction.signer_public_key,\r\n                            nonce: transaction.nonce,\r\n                            payload: JSON.stringify(transaction.payload),\r\n                            table: transaction.payload.table,\r\n                            transaction: transaction.payload.transaction,\r\n                            data: data,\r\n                            host: transaction.payload.host,\r\n                            blockchain_host: transaction.payload.blockchain_host,\r\n                            application_time: transaction.payload.application_time,\r\n                            blockchain_time: transaction.payload.datetime,\r\n                            unixDatetime: transaction.payload.unixDatetime\r\n                        };\r\n                        trxs.push(trx);\r\n                    });\r\n                });\r\n            } else {\r\n                let trx = {\r\n                    id: block.batches[0].transactions[0].id,\r\n                    block_num: block.block_num,\r\n                    block_hash: block.block_hash,\r\n                    previous_block_hash: block.previous_block_hash,\r\n                    signer_public_key: block.batches[0].transactions[0].signer_public_key,\r\n                    payload: \"GENESIS BLOCK\"\r\n                };\r\n                trxs.push(trx);\r\n            }\r\n        });\r\n        return trxs;\r\n    });\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport Block from './Block';\r\nimport getBlocks from '../services/BlockService';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Box } from '@material-ui/core';\r\n\r\nexport default function Blockchain() {\r\n    const [blocks, setBlocks] = useState([]);\r\n    useEffect(() => getBlocks().then(blocks => setBlocks(blocks)), []);\r\n    return(\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"small\" aria-label=\"a dense table\">\r\n                <TableHead className=\"Head\">\r\n                    <TableRow>\r\n                        <TableCell align=\"center\"></TableCell>\r\n                        <TableCell align=\"center\"><Box fontWeight=\"fontWeightBold\" m={1}>Block</Box></TableCell>\r\n                        <TableCell align=\"center\"><Box fontWeight=\"fontWeightBold\" m={1}>Transaction</Box></TableCell>\r\n                        <TableCell align=\"center\"><Box fontWeight=\"fontWeightBold\" m={1}>Table</Box></TableCell>\r\n                        <TableCell align=\"center\"><Box fontWeight=\"fontWeightBold\" m={1}>Data</Box></TableCell>\r\n                        <TableCell align=\"center\"><Box fontWeight=\"fontWeightBold\" m={1}>Server</Box></TableCell>\r\n                        <TableCell align=\"center\"><Box fontWeight=\"fontWeightBold\" m={1}>Blockchain host</Box></TableCell>\r\n                        <TableCell align=\"center\"><Box fontWeight=\"fontWeightBold\" m={1}>Application time</Box></TableCell>\r\n                        <TableCell align=\"center\"><Box fontWeight=\"fontWeightBold\" m={1}>Blockchain time</Box></TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {\r\n                    blocks.map((block, index) =>\r\n                        <Block\r\n                            key={block.id}\r\n                            block_num={block.block_num}\r\n                            index={blocks.length - index - 1}\r\n                            block_hash={block.block_hash}\r\n                            previous_block_hash={block.previous_block_hash}\r\n                            signer_public_key={block.signer_public_key}\r\n                            nonce={block.nonce}\r\n                            payload={block.payload}\r\n                            table={block.table}\r\n                            transaction={block.transaction}\r\n                            data={block.data}\r\n                            host={block.host}\r\n                            blockchain_host={block.blockchain_host}\r\n                            application_time={block.application_time}\r\n                            blockchain_time={block.blockchain_time}\r\n                            unixDatetime={block.unixDatetime}\r\n                        />\r\n                    )\r\n                }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}","import Blockchain from './components/Blockchain';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <section className=\"App-content\">\n        <Blockchain />\n      </section>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}